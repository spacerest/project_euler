## The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
## 
## 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
## 
## Let us list the factors of the first seven triangle numbers:
## 
##  1: 1
##  3: 1,3
##  6: 1,2,3,6
## 10: 1,2,5,10
## 15: 1,3,5,15
## 21: 1,3,7,21
## 28: 1,2,4,7,14,28
## We can see that 28 is the first triangle number to have over five divisors.
## 
## What is the value of the first triangle number to have over five hundred divisors?
## 
require 'mathn'

class P012

  def say_hi
    'ho'
  end
def triangle2(min_count_divisors)
    time = Time.now()
    triangle_num = 1 
    count_up = 1
    until min_count_divisors < num_divisors(triangle_num)
      count_up += 1
      triangle_num += count_up 
    end  
    
    puts time - Time.now
    triangle_num

  end


  def triangle(min_count_divisors)
    time = Time.now()
    #count_up = 1
    #until min_count_divisors < num_divisors(triangle_num)
    #  count_up += 1
    #  triangle_num += count_up 
    #end  
    
   triangle_base = (1..Float::INFINITY).lazy.select { |x|
   num_divisors(x * (x + 1)/2) > min_count_divisors}.take(1).to_a[0]
    puts time - Time.now
    triangle_num = triangle_base * (triangle_base + 1)/2
  triangle_num

  end

  def num_divisors(of_integer)
    sieve = Array.new(of_integer){ false } 
    sieve = sieve.each_index.map { |x|
      of_integer % (x + 1) == 0 ? true : false
     }
    sieve.count(true) #each number takes itself as divisor
  end

      #count out how many times each prime factor goes into triangle number thanks to explanation at http://www.wikihow.com/Determine-the-Number-of-Divisors-of-an-Integer
       

    #count all divisors of that number, based on the prime factors
 

end
